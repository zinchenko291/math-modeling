{"version":3,"sources":["js/sha256.js"],"names":["SHA256","s","safe_add","x","y","lsw","S","X","n","utftext","hex_tab","str","c","i","binarray","length","charAt","fromCharCode","m","l","K","Array","HASH","W","Sigma0256","a","Sigma1256","b","d","e","Gamma0256","f","g","h","j","T1","T2","core_sha256","bin","string","charCodeAt","String","str2binb","chrsz"],"mappings":"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","file":"sha256.js","sourcesContent":["/**\r\n*\r\n*  Secure Hash Algorithm (SHA256)\r\n*  http://www.webtoolkit.info/\r\n*\r\n*  Original code by Angel Marin, Paul Johnston.\r\n*\r\n**/\r\n \r\nfunction SHA256(s){\r\n \r\n\tvar chrsz   = 8;\r\n\tvar hexcase = 0;\r\n \r\n\tfunction safe_add (x, y) {\r\n\t\tvar lsw = (x & 0xFFFF) + (y & 0xFFFF);\r\n\t\tvar msw = (x >> 16) + (y >> 16) + (lsw >> 16);\r\n\t\treturn (msw << 16) | (lsw & 0xFFFF);\r\n\t}\r\n \r\n\tfunction S (X, n) { return ( X >>> n ) | (X << (32 - n)); }\r\n\tfunction R (X, n) { return ( X >>> n ); }\r\n\tfunction Ch(x, y, z) { return ((x & y) ^ ((~x) & z)); }\r\n\tfunction Maj(x, y, z) { return ((x & y) ^ (x & z) ^ (y & z)); }\r\n\tfunction Sigma0256(x) { return (S(x, 2) ^ S(x, 13) ^ S(x, 22)); }\r\n\tfunction Sigma1256(x) { return (S(x, 6) ^ S(x, 11) ^ S(x, 25)); }\r\n\tfunction Gamma0256(x) { return (S(x, 7) ^ S(x, 18) ^ R(x, 3)); }\r\n\tfunction Gamma1256(x) { return (S(x, 17) ^ S(x, 19) ^ R(x, 10)); }\r\n \r\n\tfunction core_sha256 (m, l) {\r\n\t\tvar K = new Array(0x428A2F98, 0x71374491, 0xB5C0FBCF, 0xE9B5DBA5, 0x3956C25B, 0x59F111F1, 0x923F82A4, 0xAB1C5ED5, 0xD807AA98, 0x12835B01, 0x243185BE, 0x550C7DC3, 0x72BE5D74, 0x80DEB1FE, 0x9BDC06A7, 0xC19BF174, 0xE49B69C1, 0xEFBE4786, 0xFC19DC6, 0x240CA1CC, 0x2DE92C6F, 0x4A7484AA, 0x5CB0A9DC, 0x76F988DA, 0x983E5152, 0xA831C66D, 0xB00327C8, 0xBF597FC7, 0xC6E00BF3, 0xD5A79147, 0x6CA6351, 0x14292967, 0x27B70A85, 0x2E1B2138, 0x4D2C6DFC, 0x53380D13, 0x650A7354, 0x766A0ABB, 0x81C2C92E, 0x92722C85, 0xA2BFE8A1, 0xA81A664B, 0xC24B8B70, 0xC76C51A3, 0xD192E819, 0xD6990624, 0xF40E3585, 0x106AA070, 0x19A4C116, 0x1E376C08, 0x2748774C, 0x34B0BCB5, 0x391C0CB3, 0x4ED8AA4A, 0x5B9CCA4F, 0x682E6FF3, 0x748F82EE, 0x78A5636F, 0x84C87814, 0x8CC70208, 0x90BEFFFA, 0xA4506CEB, 0xBEF9A3F7, 0xC67178F2);\r\n\t\tvar HASH = new Array(0x6A09E667, 0xBB67AE85, 0x3C6EF372, 0xA54FF53A, 0x510E527F, 0x9B05688C, 0x1F83D9AB, 0x5BE0CD19);\r\n\t\tvar W = new Array(64);\r\n\t\tvar a, b, c, d, e, f, g, h, i, j;\r\n\t\tvar T1, T2;\r\n \r\n\t\tm[l >> 5] |= 0x80 << (24 - l % 32);\r\n\t\tm[((l + 64 >> 9) << 4) + 15] = l;\r\n \r\n\t\tfor ( var i = 0; i<m.length; i+=16 ) {\r\n\t\t\ta = HASH[0];\r\n\t\t\tb = HASH[1];\r\n\t\t\tc = HASH[2];\r\n\t\t\td = HASH[3];\r\n\t\t\te = HASH[4];\r\n\t\t\tf = HASH[5];\r\n\t\t\tg = HASH[6];\r\n\t\t\th = HASH[7];\r\n \r\n\t\t\tfor ( var j = 0; j<64; j++) {\r\n\t\t\t\tif (j < 16) W[j] = m[j + i];\r\n\t\t\t\telse W[j] = safe_add(safe_add(safe_add(Gamma1256(W[j - 2]), W[j - 7]), Gamma0256(W[j - 15])), W[j - 16]);\r\n \r\n\t\t\t\tT1 = safe_add(safe_add(safe_add(safe_add(h, Sigma1256(e)), Ch(e, f, g)), K[j]), W[j]);\r\n\t\t\t\tT2 = safe_add(Sigma0256(a), Maj(a, b, c));\r\n \r\n\t\t\t\th = g;\r\n\t\t\t\tg = f;\r\n\t\t\t\tf = e;\r\n\t\t\t\te = safe_add(d, T1);\r\n\t\t\t\td = c;\r\n\t\t\t\tc = b;\r\n\t\t\t\tb = a;\r\n\t\t\t\ta = safe_add(T1, T2);\r\n\t\t\t}\r\n \r\n\t\t\tHASH[0] = safe_add(a, HASH[0]);\r\n\t\t\tHASH[1] = safe_add(b, HASH[1]);\r\n\t\t\tHASH[2] = safe_add(c, HASH[2]);\r\n\t\t\tHASH[3] = safe_add(d, HASH[3]);\r\n\t\t\tHASH[4] = safe_add(e, HASH[4]);\r\n\t\t\tHASH[5] = safe_add(f, HASH[5]);\r\n\t\t\tHASH[6] = safe_add(g, HASH[6]);\r\n\t\t\tHASH[7] = safe_add(h, HASH[7]);\r\n\t\t}\r\n\t\treturn HASH;\r\n\t}\r\n \r\n\tfunction str2binb (str) {\r\n\t\tvar bin = Array();\r\n\t\tvar mask = (1 << chrsz) - 1;\r\n\t\tfor(var i = 0; i < str.length * chrsz; i += chrsz) {\r\n\t\t\tbin[i>>5] |= (str.charCodeAt(i / chrsz) & mask) << (24 - i%32);\r\n\t\t}\r\n\t\treturn bin;\r\n\t}\r\n \r\n\tfunction Utf8Encode(string) {\r\n\t\tstring = string.replace(/\\r\\n/g,\"\\n\");\r\n\t\tvar utftext = \"\";\r\n \r\n\t\tfor (var n = 0; n < string.length; n++) {\r\n \r\n\t\t\tvar c = string.charCodeAt(n);\r\n \r\n\t\t\tif (c < 128) {\r\n\t\t\t\tutftext += String.fromCharCode(c);\r\n\t\t\t}\r\n\t\t\telse if((c > 127) && (c < 2048)) {\r\n\t\t\t\tutftext += String.fromCharCode((c >> 6) | 192);\r\n\t\t\t\tutftext += String.fromCharCode((c & 63) | 128);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tutftext += String.fromCharCode((c >> 12) | 224);\r\n\t\t\t\tutftext += String.fromCharCode(((c >> 6) & 63) | 128);\r\n\t\t\t\tutftext += String.fromCharCode((c & 63) | 128);\r\n\t\t\t}\r\n \r\n\t\t}\r\n \r\n\t\treturn utftext;\r\n\t}\r\n \r\n\tfunction binb2hex (binarray) {\r\n\t\tvar hex_tab = hexcase ? \"0123456789ABCDEF\" : \"0123456789abcdef\";\r\n\t\tvar str = \"\";\r\n\t\tfor(var i = 0; i < binarray.length * 4; i++) {\r\n\t\t\tstr += hex_tab.charAt((binarray[i>>2] >> ((3 - i%4)*8+4)) & 0xF) +\r\n\t\t\thex_tab.charAt((binarray[i>>2] >> ((3 - i%4)*8  )) & 0xF);\r\n\t\t}\r\n\t\treturn str;\r\n\t}\r\n \r\n\ts = Utf8Encode(s);\r\n\treturn binb2hex(core_sha256(str2binb(s), s.length * chrsz));\r\n \r\n}"],"sourceRoot":"../.src/"}